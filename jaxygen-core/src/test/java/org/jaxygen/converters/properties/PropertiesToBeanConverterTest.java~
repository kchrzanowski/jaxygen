/*
 * Copyright 2016 Artur.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jaxygen.converters.properties;

import com.google.common.collect.Lists;
import java.util.List;
import java.util.Map;
import org.apache.commons.beanutils.converters.BooleanConverter;
import org.apache.commons.beanutils.converters.ByteConverter;
import org.apache.commons.beanutils.converters.CharacterConverter;
import org.apache.commons.beanutils.converters.DoubleConverter;
import org.apache.commons.beanutils.converters.FloatConverter;
import org.apache.commons.beanutils.converters.IntegerConverter;
import org.apache.commons.beanutils.converters.LongConverter;
import org.apache.commons.beanutils.converters.ShortConverter;
import org.apache.commons.beanutils.converters.StringConverter;
import static org.jaxygen.converters.properties.PropertiesToBeanConverter.converters;
import org.jaxygen.dto.Uploadable;
import org.jaxygen.http.HttpRequestParams;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Artur
 */
public class PropertiesToBeanConverterTest {
    
    public PropertiesToBeanConverterTest() {
    }

    @Test
    public void testIsCovertable() {
        List<Class> convertable = Lists.newArrayList(
                Boolean.class,
                Boolean.TYPE,
                Byte.class,
                Byte.TYPE, new ByteConverter());
    converters.put(Character.class, new CharacterConverter());
    converters.put(Character.TYPE, new CharacterConverter());
    converters.put(Float.class, new FloatConverter());
    converters.put(Float.TYPE, new FloatConverter());
    converters.put(Double.class, new DoubleConverter());
    converters.put(Double.TYPE, new DoubleConverter());
    converters.put(double.class, new DoubleConverter());
    converters.put(Integer.class, new IntegerConverter());
    converters.put(Integer.TYPE, new IntegerConverter());
    converters.put(Long.class, new LongConverter());
    converters.put(Long.TYPE, new LongConverter());
    converters.put(Short.class, new ShortConverter());
    converters.put(Short.TYPE, new ShortConverter());
    converters.put(Enum.class, new EnumConverter());
    converters.put(String.class, new StringConverter());
        System.out.println("isCovertable");
        Class c = null;
        boolean expResult = false;
        boolean result = PropertiesToBeanConverter.isCovertable(c);
        assertEquals(expResult, result);
        fail("The test case is a prototype.");
    }

    @Test
    public void testDeserialise() throws Exception {
        System.out.println("deserialise");
        HttpRequestParams params = null;
        Class beanClass = null;
        PropertiesToBeanConverter instance = new PropertiesToBeanConverter();
        Object expResult = null;
        Object result = instance.deserialise(params, beanClass);
        assertEquals(expResult, result);
        fail("The test case is a prototype.");
    }

    @Test
    public void testConvertPropertiesToBean_3args_1() throws Exception {
        System.out.println("convertPropertiesToBean");
        Map<String, String> properties = null;
        Map<String, Uploadable> files = null;
        Class beanClass = null;
        Object expResult = null;
        Object result = PropertiesToBeanConverter.convertPropertiesToBean(properties, files, beanClass);
        assertEquals(expResult, result);
        fail("The test case is a prototype.");
    }

    @Test
    public void testConvertPropertiesToBean_3args_2() throws Exception {
        System.out.println("convertPropertiesToBean");
        Map<String, String> properties = null;
        Map<String, Uploadable> files = null;
        Object bean = null;
        Object expResult = null;
        Object result = PropertiesToBeanConverter.convertPropertiesToBean(properties, files, bean);
        assertEquals(expResult, result);
        fail("The test case is a prototype.");
    }

    @Test
    public void testGetName() {
        System.out.println("getName");
        PropertiesToBeanConverter instance = new PropertiesToBeanConverter();
        String expResult = "";
        String result = instance.getName();
        assertEquals(expResult, result);
        fail("The test case is a prototype.");
    }
    
}
